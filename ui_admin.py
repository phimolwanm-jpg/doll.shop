# M:/doll_shop/ui_admin.py (‡∏ß‡∏≤‡∏á‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)

import customtkinter as ctk
from tkinter import ttk, messagebox, filedialog
from PIL import Image
import os
import shutil

class AdminWindow(ctk.CTkFrame):
    def __init__(self, parent, main_app):
        """
        ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Constructor ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö main_app ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        """
        super().__init__(parent, fg_color="#F8F9FA")
        self.main_app = main_app
        self.db = main_app.db
        self.assets = main_app.assets # ‡∏î‡∏∂‡∏á assets ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß

        self.selected_product_id = None
        self.image_path = None # ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        self.image_filename = None # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•

        self.setup_ui()
        self.load_products_to_treeview()

    def on_show(self):
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢ main.py ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á
        ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡∏°‡∏≠
        """
        self.clear_form()
        self.load_products_to_treeview()

    def setup_ui(self):
        self.grid_columnconfigure(0, weight=3)
        self.grid_columnconfigure(1, weight=2)
        self.grid_rowconfigure(1, weight=1)

        # --- Header ---
        header_frame = ctk.CTkFrame(self, fg_color="transparent")
        header_frame.grid(row=0, column=0, columnspan=2, padx=30, pady=20, sticky="ew")
        ctk.CTkLabel(header_frame, text="‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô", font=ctk.CTkFont(size=28, weight="bold")).pack(side="left")
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        back_button = ctk.CTkButton(header_frame, text="< ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", fg_color="transparent", text_color="gray50", hover=False,
                                    command=lambda: self.main_app.navigate_to('HomeWindow'))
        back_button.pack(side="right")

        # --- Left Panel: Product List ---
        list_frame = ctk.CTkFrame(self, fg_color="white", corner_radius=15)
        list_frame.grid(row=1, column=0, padx=(30, 10), pady=10, sticky="nsew")
        list_frame.grid_propagate(False)
        list_frame.grid_rowconfigure(1, weight=1)
        list_frame.grid_columnconfigure(0, weight=1)

        ctk.CTkLabel(list_frame, text="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", font=ctk.CTkFont(size=18, weight="bold")).grid(row=0, column=0, padx=20, pady=15, sticky="w")
        self.setup_treeview(list_frame)

        # --- Right Panel: Product Form ---
        form_frame = ctk.CTkFrame(self, fg_color="white", corner_radius=15)
        form_frame.grid(row=1, column=1, padx=(10, 30), pady=10, sticky="nsew")
        form_frame.grid_columnconfigure(0, weight=1)
        
        ctk.CTkLabel(form_frame, text="‡πÄ‡∏û‡∏¥‡πà‡∏° / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", font=ctk.CTkFont(size=18, weight="bold")).grid(row=0, column=0, padx=20, pady=15, sticky="w")
        self.setup_form(form_frame)


    def setup_treeview(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Treeview"""
        style = ttk.Style()
        style.configure("Treeview.Heading", font=('Arial', 14, 'bold'))
        style.configure("Treeview", rowheight=30, font=('Arial', 12))
        
        columns = ("id", "name", "category", "price", "stock")
        self.tree = ttk.Treeview(parent, columns=columns, show="headings", style="Treeview")

        headings = {"id": "ID", "name": "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "category": "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "price": "‡∏£‡∏≤‡∏Ñ‡∏≤", "stock": "‡∏™‡∏ï‡πá‡∏≠‡∏Å"}
        widths = {"id": 50, "name": 250, "category": 120, "price": 100, "stock": 80}

        for col, heading in headings.items():
            self.tree.heading(col, text=heading)
            self.tree.column(col, width=widths[col], anchor="center")
        
        self.tree.grid(row=1, column=0, sticky="nsew", padx=20, pady=10)
        self.tree.bind("<<TreeviewSelect>>", self.on_product_select)


    def setup_form(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        form_fields = ctk.CTkFrame(parent, fg_color="transparent")
        form_fields.grid(row=1, column=0, padx=20, pady=10, sticky="nsew")
        form_fields.grid_columnconfigure(1, weight=1)
        
        self.entries = {}
        fields = {"name": "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", "category": "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:", "price": "‡∏£‡∏≤‡∏Ñ‡∏≤:", "stock": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:", "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:"}

        for i, (key, label) in enumerate(fields.items()):
            ctk.CTkLabel(form_fields, text=label).grid(row=i, column=0, padx=5, pady=10, sticky="w")
            if key == "description":
                entry = ctk.CTkTextbox(form_fields, height=100)
            else:
                entry = ctk.CTkEntry(form_fields)
            entry.grid(row=i, column=1, padx=5, pady=10, sticky="ew")
            self.entries[key] = entry
        
        # --- Image Upload ---
        ctk.CTkLabel(form_fields, text="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:").grid(row=len(fields), column=0, padx=5, pady=10, sticky="w")
        self.image_label = ctk.CTkLabel(form_fields, text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", text_color="gray")
        self.image_label.grid(row=len(fields), column=1, padx=5, pady=10, sticky="w")
        upload_btn = ctk.CTkButton(form_fields, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", command=self.upload_image)
        upload_btn.grid(row=len(fields)+1, column=1, padx=5, pady=5, sticky="w")
        
        # --- Action Buttons ---
        btn_frame = ctk.CTkFrame(parent, fg_color="transparent")
        btn_frame.grid(row=2, column=0, sticky="ew", padx=20, pady=15)
        btn_frame.grid_columnconfigure((0, 1, 2), weight=1)

        ctk.CTkButton(btn_frame, text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", command=self.save_product, height=40).grid(row=0, column=0, padx=5, sticky="ew")
        ctk.CTkButton(btn_frame, text="‚ú® ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°", command=self.clear_form, fg_color="gray50", height=40).grid(row=0, column=1, padx=5, sticky="ew")
        ctk.CTkButton(btn_frame, text="üóëÔ∏è ‡∏•‡∏ö", command=self.delete_product, fg_color="#D22B2B", hover_color="#8B0000", height=40).grid(row=0, column=2, padx=5, sticky="ew")

    def load_products_to_treeview(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        products = self.db.get_all_products()
        for p in products:
            product = p # p is already a dict
            self.tree.insert("", "end", values=(product['product_id'], product['name'], product['category'], f"{product['price']:.2f}", product['stock']))

    def on_product_select(self, event):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°"""
        selected_items = self.tree.selection()
        if not selected_items:
            return
        
        item = self.tree.item(selected_items[0])
        self.selected_product_id = item['values'][0]
        
        product_data = self.db.get_product_by_id(self.selected_product_id)
        if not product_data:
            self.clear_form()
            return
        
        self.entries['name'].delete(0, 'end'); self.entries['name'].insert(0, product_data['name'])
        self.entries['category'].delete(0, 'end'); self.entries['category'].insert(0, product_data['category'])
        self.entries['price'].delete(0, 'end'); self.entries['price'].insert(0, product_data['price'])
        self.entries['stock'].delete(0, 'end'); self.entries['stock'].insert(0, product_data['stock'])
        self.entries['description'].delete("1.0", 'end'); self.entries['description'].insert("1.0", product_data['description'] or "")
        
        self.image_filename = product_data['image_url']
        self.image_label.configure(text=self.image_filename or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")

    def upload_image(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå"""
        filepath = filedialog.askopenfilename(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", 
            filetypes=(("Image files", "*.jpg *.jpeg *.png"), ("All files", "*.*")), 
            parent=self
        )
        if not filepath:
            return

        filename = os.path.basename(filepath)
        images_dir = os.path.join(os.path.dirname(__file__), "assets", "images")
        os.makedirs(images_dir, exist_ok=True)
        
        destination_path = os.path.join(images_dir, filename)
        
        # ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (normalize path)
        src_path = os.path.abspath(filepath).lower()
        dst_path = os.path.abspath(destination_path).lower()
        
        if src_path != dst_path:
            try:
                shutil.copy(filepath, destination_path)
                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û '{filename}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!", parent=self)
            except Exception as e:
                messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}", parent=self)
                return
        else:
            messagebox.showinfo("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", parent=self)
        
        self.image_filename = filename # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
        self.image_label.configure(text=self.image_filename)

    def save_product(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)"""
        try:
            name = self.entries['name'].get().strip()
            category = self.entries['category'].get().strip()
            price = float(self.entries['price'].get())
            stock = int(self.entries['stock'].get())
            description = self.entries['description'].get("1.0", "end-1c").strip()

            if not all([name, category]):
                messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", parent=self)
                return

            # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°)
            image_url = self.image_filename if self.image_filename else ""

            if self.selected_product_id:
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                self.db.update_product(
                    self.selected_product_id,
                    name=name,
                    description=description,
                    price=price,
                    stock=stock,
                    category=category,
                    image_url=image_url
                )
                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!", parent=self)
            else:
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
                self.db.create_product(name, description, price, stock, category, image_url)
                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!", parent=self)
            
            self.on_show() # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        except ValueError:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", parent=self)
        except Exception as e:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", parent=self)

    def delete_product(self):
        """‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        if not self.selected_product_id:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", parent=self)
            return
        if messagebox.askyesno("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ?", parent=self):
            self.db.delete_product(self.selected_product_id)
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", parent=self)
            self.on_show() # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    def clear_form(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.selected_product_id = None
        self.image_filename = None
        self.tree.selection_remove(self.tree.selection())

        for entry in self.entries.values():
            if isinstance(entry, (ctk.CTkEntry, ctk.CTkTextbox)):
                entry.delete("1.0" if isinstance(entry, ctk.CTkTextbox) else "0", 'end')
        
        self.image_label.configure(text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")